// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
<<<<<<< HEAD
//! DATE: 2022-04-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
=======
//! DATE: 2022-03-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/pallet_identity.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	// Storage: Identity Registrars (r:1 w:1)
	fn add_registrar(r: u32, ) -> Weight {
<<<<<<< HEAD
		(12_102_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((187_000 as Weight).saturating_mul(r as Weight))
=======
		(11_701_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((227_000 as Weight).saturating_mul(r as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	fn set_identity(r: u32, x: u32, ) -> Weight {
<<<<<<< HEAD
		(25_783_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((175_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 1_000
			.saturating_add((357_000 as Weight).saturating_mul(x as Weight))
=======
		(25_210_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((148_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 1_000
			.saturating_add((363_000 as Weight).saturating_mul(x as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:1 w:1)
	fn set_subs_new(s: u32, ) -> Weight {
<<<<<<< HEAD
		(22_890_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_668_000 as Weight).saturating_mul(s as Weight))
=======
		(24_287_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_755_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:1)
	fn set_subs_old(p: u32, ) -> Weight {
<<<<<<< HEAD
		(22_215_000 as Weight)
			// Standard Error: 0
			.saturating_add((753_000 as Weight).saturating_mul(p as Weight))
=======
		(21_748_000 as Weight)
			// Standard Error: 0
			.saturating_add((743_000 as Weight).saturating_mul(p as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:100)
<<<<<<< HEAD
	fn clear_identity(_r: u32, s: u32, x: u32, ) -> Weight {
		(33_494_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((735_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 1_000
			.saturating_add((223_000 as Weight).saturating_mul(x as Weight))
=======
	fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
		(27_190_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((79_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((722_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 0
			.saturating_add((225_000 as Weight).saturating_mul(x as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	fn request_judgement(r: u32, x: u32, ) -> Weight {
<<<<<<< HEAD
		(26_639_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((189_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((416_000 as Weight).saturating_mul(x as Weight))
=======
		(26_469_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((169_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((408_000 as Weight).saturating_mul(x as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	fn cancel_request(r: u32, x: u32, ) -> Weight {
<<<<<<< HEAD
		(24_765_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((108_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((407_000 as Weight).saturating_mul(x as Weight))
=======
		(23_404_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((139_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((404_000 as Weight).saturating_mul(x as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_fee(r: u32, ) -> Weight {
<<<<<<< HEAD
		(4_355_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((153_000 as Weight).saturating_mul(r as Weight))
=======
		(4_677_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((152_000 as Weight).saturating_mul(r as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_account_id(r: u32, ) -> Weight {
<<<<<<< HEAD
		(4_303_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((148_000 as Weight).saturating_mul(r as Weight))
=======
		(4_460_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((150_000 as Weight).saturating_mul(r as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_fields(r: u32, ) -> Weight {
<<<<<<< HEAD
		(4_465_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((146_000 as Weight).saturating_mul(r as Weight))
=======
		(4_571_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((153_000 as Weight).saturating_mul(r as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
<<<<<<< HEAD
		(18_515_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((140_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((408_000 as Weight).saturating_mul(x as Weight))
=======
		(18_344_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((124_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((404_000 as Weight).saturating_mul(x as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:100)
<<<<<<< HEAD
	fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
		(41_060_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((71_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 0
			.saturating_add((744_000 as Weight).saturating_mul(s as Weight))
			// Standard Error: 0
			.saturating_add((7_000 as Weight).saturating_mul(x as Weight))
=======
	fn kill_identity(r: u32, s: u32, _x: u32, ) -> Weight {
		(40_297_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((70_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 1_000
			.saturating_add((724_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn add_sub(s: u32, ) -> Weight {
<<<<<<< HEAD
		(28_969_000 as Weight)
=======
		(28_599_000 as Weight)
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			// Standard Error: 0
			.saturating_add((102_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	fn rename_sub(s: u32, ) -> Weight {
<<<<<<< HEAD
		(8_968_000 as Weight)
			// Standard Error: 0
			.saturating_add((19_000 as Weight).saturating_mul(s as Weight))
=======
		(9_070_000 as Weight)
			// Standard Error: 0
			.saturating_add((20_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn remove_sub(s: u32, ) -> Weight {
<<<<<<< HEAD
		(29_930_000 as Weight)
			// Standard Error: 0
			.saturating_add((93_000 as Weight).saturating_mul(s as Weight))
=======
		(29_544_000 as Weight)
			// Standard Error: 0
			.saturating_add((89_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn quit_sub(s: u32, ) -> Weight {
<<<<<<< HEAD
		(19_684_000 as Weight)
			// Standard Error: 0
			.saturating_add((90_000 as Weight).saturating_mul(s as Weight))
=======
		(19_341_000 as Weight)
			// Standard Error: 0
			.saturating_add((88_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
