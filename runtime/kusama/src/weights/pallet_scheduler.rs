// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_scheduler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
<<<<<<< HEAD
//! DATE: 2022-04-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
=======
//! DATE: 2022-03-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/pallet_scheduler.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_scheduler`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn on_initialize_periodic_named_resolved(s: u32, ) -> Weight {
<<<<<<< HEAD
		(1_758_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((24_061_000 as Weight).saturating_mul(s as Weight))
=======
		(0 as Weight)
			// Standard Error: 28_000
			.saturating_add((23_540_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn on_initialize_named_resolved(s: u32, ) -> Weight {
<<<<<<< HEAD
		(452_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((19_512_000 as Weight).saturating_mul(s as Weight))
=======
		(1_922_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((18_731_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	fn on_initialize_periodic_resolved(s: u32, ) -> Weight {
		(0 as Weight)
<<<<<<< HEAD
			// Standard Error: 30_000
			.saturating_add((21_846_000 as Weight).saturating_mul(s as Weight))
=======
			// Standard Error: 28_000
			.saturating_add((21_333_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	fn on_initialize_resolved(s: u32, ) -> Weight {
<<<<<<< HEAD
		(3_196_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((18_358_000 as Weight).saturating_mul(s as Weight))
=======
		(3_373_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((17_693_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Preimage PreimageFor (r:1 w:0)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn on_initialize_named_aborted(s: u32, ) -> Weight {
<<<<<<< HEAD
		(4_076_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((9_022_000 as Weight).saturating_mul(s as Weight))
=======
		(5_089_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_852_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Preimage PreimageFor (r:1 w:0)
	fn on_initialize_aborted(s: u32, ) -> Weight {
<<<<<<< HEAD
		(5_526_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((6_990_000 as Weight).saturating_mul(s as Weight))
=======
		(5_759_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((6_860_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn on_initialize_periodic_named(s: u32, ) -> Weight {
<<<<<<< HEAD
		(8_256_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((14_492_000 as Weight).saturating_mul(s as Weight))
=======
		(7_929_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((14_075_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:2 w:2)
	fn on_initialize_periodic(s: u32, ) -> Weight {
<<<<<<< HEAD
		(9_561_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_309_000 as Weight).saturating_mul(s as Weight))
=======
		(8_795_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((11_887_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn on_initialize_named(s: u32, ) -> Weight {
<<<<<<< HEAD
		(9_923_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((10_224_000 as Weight).saturating_mul(s as Weight))
=======
		(8_961_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((9_767_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	fn on_initialize(s: u32, ) -> Weight {
<<<<<<< HEAD
		(5_620_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((9_632_000 as Weight).saturating_mul(s as Weight))
=======
		(9_293_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_907_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	fn schedule(s: u32, ) -> Weight {
<<<<<<< HEAD
		(15_234_000 as Weight)
			// Standard Error: 0
=======
		(15_107_000 as Weight)
			// Standard Error: 1_000
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add((44_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	fn cancel(s: u32, ) -> Weight {
<<<<<<< HEAD
		(14_831_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_005_000 as Weight).saturating_mul(s as Weight))
=======
		(13_151_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((2_077_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn schedule_named(s: u32, ) -> Weight {
<<<<<<< HEAD
		(17_664_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((60_000 as Weight).saturating_mul(s as Weight))
=======
		(17_845_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((52_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn cancel_named(s: u32, ) -> Weight {
<<<<<<< HEAD
		(15_608_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((2_015_000 as Weight).saturating_mul(s as Weight))
=======
		(15_422_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((2_035_000 as Weight).saturating_mul(s as Weight))
>>>>>>> 9ed0c98204d25eaad8a6b40248daee8e6a40d111
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
